console.log('App.js is running!');

// React Events and METHOD BINDING

// the class name has to start from Capital and all React Component have to have render()
// Nesting inside Indecision component

class IndecisionApp extends React.Component{
    constructor(props){
      super(props);
      this.handleDeleteOptions = this.handleDeleteOptions.bind(this);
      this.handlePick = this.handlePick.bind(this);
      this.handleAddOption = this.handleAddOption.bind(this);
      this.state = {
        options:  ['one','two','three','four']
      };
      
    }
    handleDeleteOptions(){
      this.setState(()=>{
        return { options : [] };
      });
    }
    handlePick() {
      const randomNum = Math.floor(Math.random() * this.state.options.length);
      const option = this.state.options[randomNum];
      alert(option);
    }
    handleAddOption(option){
      console.log(option);
      if(!option){
        return "Enter Valid Value to Add Item "
      }else if(this.state.options.indexOf(option)>-1) {
        return "This Item already exists "
      }
      this.setState((prevState) =>{
        return {options : prevState.options.concat([option])};
      });
    }
    render(){
       const title='Indecision App';  //props
       const subtitle = 'Put your life in the hands of computer';
       return( <div>
            <Header title={title} subtitle={subtitle}/>
            <Action 
              hasOptions={(this.state.options.length)>0}
              handlePick={this.handlePick}
            />
            <Options
              options={this.state.options}
              handleDeleteOptions={this.handleDeleteOptions}
            />
            <AddOption 
              handleAddOption= {this.handleAddOption}
            />
        </div> );
    }


}


class Header extends React.Component{
    render(){
        console.log('title : ',this.props.title);
        return( <div>
            <h1>{this.props.title}</h1>
            <h2>{this.props.subtitle}</h2>
        </div>);
    }
}
class Action extends React.Component{
    
  render() {
    return (
      <div>
        <button
          onClick={this.props.handlePick}
          disabled={!this.props.hasOptions}
        >
          What should I do?
        </button>
      </div>
    );
  }
}

// Nesting the Option in Opcdtions
class Options extends React.Component{    
    render(){
        return(  
          <div>
            <button onClick={this.props.handleDeleteOptions}>Remove All</button>
            {
              this.props.options.map((option) => <Option key={option} optionText={option} />)
            }
        </div>
      );
    }
  }

class Option extends React.Component{
    render(){
        return(    
          <div>
            {this.props.optionText}
          </div>
        );
    }
}

class AddOption extends React.Component{
    constructor(props){
      super(props);
      this.handleAddOption = this.handleAddOption.bind(this);
      this.state = {
        error:undefined
      }
    }
    handleAddOption(e){
      e.preventDefault();
      const option = e.target.elements.option.value.trim();
      const error = this.props.handleAddOption(option);
      this.setState(()=>{
        return {error: error}
      })
    }
    render(){ return (
        <div>
          {this.state.error && <p> {this.state.error}</p>}
          <form onSubmit={this.handleAddOption}>
            <input type="text" name="option" />
            <button>Add Option</button>
          </form>
        </div>);
    }
}
/** 
// Demo to show bind 
const obj = {
    name: 'Vikram',
    getName() {
        return this.name;
    }
};
console.log(obj.getName()); //this will work
// now we will create a subtle tweak we will create a reference to the method getName()
// we are running the same code but we are running in different context.
const getname = obj.getName;   
// the below code will break
console.log(getname()); // we run the code in different context here and the this context is not transferred here
//The above code is something like
const func = function (){ // anonmyous function
    console.log( this );
}
func(); // this will break
// This can be solved with bind()
const getname = obj.getName.bind(obj); //or
getname = obj.getName.bind({name:'Andrew'});// we can force pass an inline object
**/
ReactDOM.render(<IndecisionApp />, document.getElementById('app'));

